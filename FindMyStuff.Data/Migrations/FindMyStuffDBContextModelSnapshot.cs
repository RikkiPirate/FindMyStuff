// <auto-generated />
using System;
using FindMyStuff.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindMyStuff.Data.Migrations
{
    [DbContext(typeof(FindMyStuffDBContext))]
    partial class FindMyStuffDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindMyStuff.Data.Models.AppConfigurationDataBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("JsonValue");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AppConfigurationDataBase");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4086794f-e470-46f6-ba3d-a9534ff0ef51"),
                            IsActive = true,
                            Name = "ApiGoogleMaps",
                            Value = "AIzaSyDlHVTgZ4eMfXiMIRy6VUn_yIAlnKc2JEs"
                        });
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("DocumentTypeId");

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b94c602b-fa28-4580-abe7-215e06a4c31a"),
                            Type = "Passport"
                        },
                        new
                        {
                            Id = new Guid("7d1d24e7-a1f5-4347-94ab-8b1d53ab86da"),
                            Type = "Driver License"
                        });
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.DocumentXperson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateFound")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateLost")
                        .HasColumnType("date");

                    b.Property<Guid>("DocumentId");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal?>("Longitud")
                        .HasColumnType("decimal(12,9)");

                    b.Property<Guid>("PersonId");

                    b.Property<bool?>("WasFound");

                    b.Property<bool?>("Wasloosed");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PersonId");

                    b.ToTable("DocumentXPerson");
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.Document", b =>
                {
                    b.HasOne("FindMyStuff.Data.Models.DocumentType", "DocumentType")
                        .WithMany("Document")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_Document_DocumentType");
                });

            modelBuilder.Entity("FindMyStuff.Data.Models.DocumentXperson", b =>
                {
                    b.HasOne("FindMyStuff.Data.Models.Document", "Document")
                        .WithMany("DocumentXperson")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_DocumentXPerson_Document");

                    b.HasOne("FindMyStuff.Data.Models.Person", "Person")
                        .WithMany("DocumentXperson")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_DocumentXPerson_Person");
                });
#pragma warning restore 612, 618
        }
    }
}
